{"remainingRequest":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\src\\components\\comm\\FPagination.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\src\\components\\comm\\FPagination.vue","mtime":1648203704692},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnOw0KaW1wb3J0IHsgcmVmLCByZWFjdGl2ZSwgY29tcHV0ZWQsIHdhdGNoLCBvblVubW91bnRlZCB9IGZyb20gJ3Z1ZSc7DQpjb25zdCBwYWdlTnVtU3RhdHVzID0gew0KICAgIGZpcnN0UGFnZTogMCwNCiAgICBsYXN0UGFnZTogMSwNCiAgICBtaWRkbGVQYWdlOiAyLA0KfTsNCmNsYXNzIFBhZ2luU2VydmVyU2lkZUluZm8gew0KICAgIGNvbnN0cnVjdG9yKHN0YXJ0LCBsZW5ndGgsIGZpbHRlcikgew0KICAgICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7DQogICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoOw0KICAgICAgICB0aGlzLmZpbHRlciA9IGZpbHRlcjsNCiAgICB9DQp9DQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgICBuYW1lOiAnRlBhZ2luYXRpb24nLA0KICAgIHByb3BzOiB7DQogICAgICAgIC8qKg0KICAgICAgICAgKiBTZXQgdGhlIHNpemUgbGlzdCBtZW51IG9mIHBhZ2luYXRpb24uDQogICAgICAgICAqLw0KICAgICAgICBwYWdlU2l6ZU1lbnU6IHsNCiAgICAgICAgICAgIHR5cGU6IEFycmF5LA0KICAgICAgICAgICAgZGVmYXVsdCgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gWzEwLCAyNSwgNTAsIDc1LCAxMDBdOw0KICAgICAgICAgICAgfSwNCiAgICAgICAgfSwNCiAgICAgICAgLyoqDQogICAgICAgICAqIFNldCB0aGUgc3RhdGljIGRhdGEgc291cmNlIG9mIHBhZ2luYXRpb24uDQogICAgICAgICAqLw0KICAgICAgICBkYXRhQXJyYXk6IHsNCiAgICAgICAgICAgIHR5cGU6IEFycmF5LA0KICAgICAgICAgICAgZGVmYXVsdCgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gW107DQogICAgICAgICAgICB9LA0KICAgICAgICB9LA0KICAgICAgICAvKioNCiAgICAgICAgICogSXMgc291cmNlIGZyb20gYSBwYWdpbkRhdGEuDQogICAgICAgICAqLw0KICAgICAgICBpc1BhZ2luRGF0YTogew0KICAgICAgICAgICAgdHlwZTogQm9vbGVhbiwNCiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLA0KICAgICAgICB9LA0KICAgICAgICAvKioNCiAgICAgICAgICogSWYgc291cmNlIGlzIGZyb20gYSBwYWdpbkRhdGEgdGhlbiB5b3UgaGF2ZSB0byB0ZWxsIGhvdyBtYW55IGRhdGEgaXMsDQogICAgICAgICAqIG9yIHRoZSBwYWdpbiB3b24ndCB3b3JrIGN1cnJlbnQuDQogICAgICAgICAqLw0KICAgICAgICB0b3RhbERhdGFMZW5ndGg6IHsNCiAgICAgICAgICAgIHR5cGU6IE51bWJlciwNCiAgICAgICAgICAgIGRlZmF1bHQ6IDAsDQogICAgICAgIH0sDQogICAgICAgIC8qKg0KICAgICAgICAgKiBFbmFibGUgc2hvdyBhbGwgcGFnaW4gbnVtYmVycy4NCiAgICAgICAgICovDQogICAgICAgIHNob3dBbGxQYWdlTnVtYmVyOiB7DQogICAgICAgICAgICB0eXBlOiBCb29sZWFuLA0KICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZSwNCiAgICAgICAgfSwNCiAgICAgICAgLyoqDQogICAgICAgICAqIElmIHNob3dBbGxQYWdlTnVtYmVyIGlzIHNldCB0byBmYWxzZSwgdGhlbiB5b3UgY2FuIHNldCB0aGlzIHBhcmFtDQogICAgICAgICAqIHRvIGxpbWl0ZWQgaG93IG1hbnkgcGFnaW4gc2hvd3MgaW4sIHRoZSBvdGhlciB3aWxsIGJlIHJlcGxhY2UgYnkgIm1vcmUiIGljb24uDQogICAgICAgICAqLw0KICAgICAgICBwYWdlTnVtYmVyc0xpbWl0ZWQ6IHsNCiAgICAgICAgICAgIHR5cGU6IE51bWJlciwNCiAgICAgICAgICAgIGRlZmF1bHQ6IDUsDQogICAgICAgIH0sDQogICAgICAgIC8qKg0KICAgICAgICAgKiBFbmFibGUgdGhlIGZpcnN0IHBhZ2UgYnV0dG9uLg0KICAgICAgICAgKi8NCiAgICAgICAgaXNFbmFibGVGaXJzdFBhZ2VCdG46IHsNCiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sDQogICAgICAgICAgICBkZWZhdWx0OiBmYWxzZSwNCiAgICAgICAgfSwNCiAgICAgICAgLyoqDQogICAgICAgICAqIEVuYWJsZSB0aGUgbGFzdCBwYWdlIGJ1dHRvbi4NCiAgICAgICAgICovDQogICAgICAgIGlzRW5hYmxlTGFzdFBhZ2VCdG46IHsNCiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sDQogICAgICAgICAgICBkZWZhdWx0OiBmYWxzZSwNCiAgICAgICAgfSwNCiAgICAgICAgLyoqDQogICAgICAgICAqIFNldCBlYWNoIHBhZ2UgZGF0YSBpcyBmcm9tIHNlcnZlciBvbiBlYWNoIGxvYWRpbmcgd2hpbGUgcGFnZSBudW0gY2hhbmdlZC4NCiAgICAgICAgICovDQogICAgICAgIHNlcnZlclNpZGU6IHsNCiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sDQogICAgICAgICAgICBkZWZhdWx0OiBmYWxzZSwNCiAgICAgICAgfSwNCiAgICAgICAgLyoqDQogICAgICAgICAqIFNldCBkYXRhIGZyb20gYWpheCwgdGhlIGFqYXgncyBzZXR0aW5nLg0KICAgICAgICAgKiBOT1RJQ0U6IGlmIHRoaXMgb3B0aW9uIGhhcyBiZWVuIHNldCwgdGhlIG9wdGlvbiAiZGF0YUFycmF5IiB3aWxsIGJlIGFib3J0Lg0KICAgICAgICAgKi8NCiAgICAgICAgYXhpb3NDb25maWdPcHRzOiB7DQogICAgICAgICAgICB0eXBlOiBPYmplY3QsDQogICAgICAgICAgICBkZWZhdWx0KCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB7fTsNCiAgICAgICAgICAgIH0sDQogICAgICAgIH0sDQogICAgICAgIC8qKg0KICAgICAgICAgKiBTZXQgZGlyZWN0IHBhZ2UgbnVtIHByb2dyYW1tYXRpY2FsbHkuDQogICAgICAgICAqIFRoZSB0cmlnZ2VySWQgaGF2ZSB0byBzZXQgd2l0aCBhIHJhbmRvbSBpZCwNCiAgICAgICAgICogZWFjaCBjYWxsIG11c3QgYmUgc2V0IGRpZmZlcmVudCB0cmlnZ2VySWQsDQogICAgICAgICAqIHNvIHRoYXQgd2F0Y2ggd2lsbCBiZSB0cmlnZ2VyZWQuDQogICAgICAgICAqIEVnOiB7cGFnZU51bTogMSwgdHJpZ2dlcklkOiBNYXRoLnJhbmRvbSgpfQ0KICAgICAgICAgKi8NCiAgICAgICAgZGlyZWN0UGFnZU51bTogew0KICAgICAgICAgICAgdHlwZTogT2JqZWN0LA0KICAgICAgICAgICAgZGVmYXVsdCgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4geyBwYWdlTnVtOiAxLCB0cmlnZ2VySWQ6ICcnIH07DQogICAgICAgICAgICB9LA0KICAgICAgICB9LA0KICAgICAgICAvKioNCiAgICAgICAgICogY29tcG9uZW50IGRpc3BsYXkgbGFuZ3VhZ2UuDQogICAgICAgICAqLw0KICAgICAgICBsYW5nOiB7DQogICAgICAgICAgICB0eXBlOiBTdHJpbmcsDQogICAgICAgICAgICBkZWZhdWx0OiAnemgtVFcnLA0KICAgICAgICB9LA0KICAgIH0sDQogICAgZW1pdHM6IFsNCiAgICAgICAgLyoqDQogICAgICAgICAqIFNldCB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gYWZ0ZXIgcGFnZSBudW0gY2hhbmdlZCBhbmQgZGF0YSBsb2FkZWQuDQogICAgICAgICAqIGVtaXQgbmFtZTogYWZ0ZXJEYXRhVXBkYXRlDQogICAgICAgICAqLw0KICAgICAgICAnYWZ0ZXJEYXRhVXBkYXRlJywNCiAgICBdLA0KICAgIHNldHVwKHByb3BzLCB7IGVtaXQgfSkgew0KICAgICAgICBjb25zdCBwYWdlU2l6ZSA9IHJlZihwcm9wcy5wYWdlU2l6ZU1lbnVbMF0pOw0KICAgICAgICBjb25zdCBub3dQYWdlTnVtID0gcmVmKDEpOw0KICAgICAgICBjb25zdCBkYXRhU291cmNlID0gcmVmKHByb3BzLmRhdGFBcnJheSk7DQogICAgICAgIGNvbnN0IHRvdGFsTnVtYmVyID0gcmVmKHByb3BzLmlzUGFnaW5EYXRhID8gcHJvcHMudG90YWxEYXRhTGVuZ3RoIDogcHJvcHMuZGF0YUFycmF5Lmxlbmd0aCk7DQogICAgICAgIGNvbnN0IGF4aW9zQ29uZmlnID0gY29tcHV0ZWQoKCkgPT4gew0KICAgICAgICAgICAgbGV0IGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICB1cmw6ICcnLA0KICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdwb3N0JywNCiAgICAgICAgICAgICAgICAgICAgZGF0YToge30sDQogICAgICAgICAgICAgICAgICAgIHBhcmFtczoge30sDQogICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgQ29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JyB9LA0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgcHJvcHMuYXhpb3NDb25maWdPcHRzDQogICAgICAgICAgICApOw0KDQogICAgICAgICAgICBpZiAocHJvcHMuc2VydmVyU2lkZSkgew0KICAgICAgICAgICAgICAgIGNvbmZpZy5kYXRhID0gbmV3IFBhZ2luU2VydmVyU2lkZUluZm8oZGF0YVN0YXJ0SW5kZXgudmFsdWUsIHBhZ2VTaXplLnZhbHVlLCBwcm9wcy5heGlvc0NvbmZpZ09wdHMuZGF0YSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHJldHVybiBjb25maWc7DQogICAgICAgIH0pOw0KDQogICAgICAgIGNvbnN0IGRhdGFTdGFydEluZGV4ID0gY29tcHV0ZWQoKCkgPT4gew0KICAgICAgICAgICAgcmV0dXJuIG5vd1BhZ2VOdW0udmFsdWUgKiBwYWdlU2l6ZS52YWx1ZSAtIHBhZ2VTaXplLnZhbHVlOw0KICAgICAgICB9KTsNCiAgICAgICAgY29uc3QgZGF0YUVuZEluZGV4ID0gY29tcHV0ZWQoKCkgPT4gew0KICAgICAgICAgICAgcmV0dXJuIG5vd1BhZ2VOdW0udmFsdWUgKiBwYWdlU2l6ZS52YWx1ZTsNCiAgICAgICAgfSk7DQogICAgICAgIGNvbnN0IGZyb20gPSBjb21wdXRlZCgoKSA9PiB7DQogICAgICAgICAgICByZXR1cm4gdG90YWxOdW1iZXIudmFsdWUgPiAwID8gZGF0YVN0YXJ0SW5kZXgudmFsdWUgKyAxIDogMDsNCiAgICAgICAgfSk7DQogICAgICAgIGNvbnN0IHRvID0gY29tcHV0ZWQoKCkgPT4gew0KICAgICAgICAgICAgcmV0dXJuIHRvdGFsTnVtYmVyLnZhbHVlID4gZGF0YUVuZEluZGV4LnZhbHVlID8gZGF0YUVuZEluZGV4LnZhbHVlIDogdG90YWxOdW1iZXIudmFsdWU7DQogICAgICAgIH0pOw0KICAgICAgICBjb25zdCBwYWdpbkNvdW50cyA9IGNvbXB1dGVkKCgpID0+IHsNCiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwodG90YWxOdW1iZXIudmFsdWUgLyBwYWdlU2l6ZS52YWx1ZSk7DQogICAgICAgIH0pOw0KICAgICAgICBjb25zdCBub3dQYWdlTnVtU3RhdHVzID0gY29tcHV0ZWQoKCkgPT4gew0KICAgICAgICAgICAgaWYgKG5vd1BhZ2VOdW0udmFsdWUgPT09IDEpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChub3dQYWdlTnVtLnZhbHVlID09PSB0b3RhbE51bWJlci52YWx1ZSkgew0KICAgICAgICAgICAgICAgIHJldHVybiAxOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIDI7DQogICAgICAgIH0pOw0KDQogICAgICAgIGNvbnN0IGRpc2FibGVkUHJldiA9IGNvbXB1dGVkKCgpID0+IHsNCiAgICAgICAgICAgIGlmIChub3dQYWdlTnVtLnZhbHVlID09PSAxIHx8IHBhZ2luQ291bnRzLnZhbHVlID09IDApIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICAgICAgY29uc3QgZGlzYWJsZWROZXh0ID0gY29tcHV0ZWQoKCkgPT4gew0KICAgICAgICAgICAgaWYgKG5vd1BhZ2VOdW0udmFsdWUgPT09IHBhZ2luQ291bnRzLnZhbHVlIHx8IHBhZ2luQ291bnRzLnZhbHVlID09PSAwKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQoNCiAgICAgICAgY29uc3QgZ2V0QmFzaWNQYWdpbmdBcnJheSA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGNvbnN0IHBhZ2luZ0FycmF5ID0gW107DQogICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBwYWdpbkNvdW50cy52YWx1ZTsgaSsrKSB7DQogICAgICAgICAgICAgICAgcGFnaW5nQXJyYXkucHVzaChpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBwYWdpbmdBcnJheTsNCiAgICAgICAgfTsNCiAgICAgICAgY29uc3QgcGFnaW5nQXJyYXkgPSBjb21wdXRlZCgoKSA9PiB7DQogICAgICAgICAgICBsZXQgcGFnaW5nQXJyYXkgPSBbXTsNCg0KICAgICAgICAgICAgaWYgKHByb3BzLnNob3dBbGxQYWdlTnVtYmVyKSB7DQogICAgICAgICAgICAgICAgcGFnaW5nQXJyYXkgPSBnZXRCYXNpY1BhZ2luZ0FycmF5KCk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHN3aXRjaCAobm93UGFnZU51bVN0YXR1cy52YWx1ZSkgew0KICAgICAgICAgICAgICAgICAgICBjYXNlIHBhZ2VOdW1TdGF0dXMuZmlyc3RQYWdlOiB7DQogICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmdBcnJheSA9IGdldEJhc2ljUGFnaW5nQXJyYXkoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYWdpbkNvdW50cy52YWx1ZSA+IHByb3BzLnBhZ2VOdW1iZXJzTGltaXRlZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luZ0FycmF5ID0gcGFnaW5nQXJyYXkuc2xpY2UoMCwgcHJvcHMucGFnZU51bWJlcnNMaW1pdGVkKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGNhc2UgcGFnZU51bVN0YXR1cy5sYXN0UGFnZTogew0KICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5nQXJyYXkgPSBnZXRCYXNpY1BhZ2luZ0FycmF5KCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFnaW5Db3VudHMudmFsdWUgPiBwcm9wcy5wYWdlTnVtYmVyc0xpbWl0ZWQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmdBcnJheSA9IHBhZ2luZ0FycmF5LnNsaWNlKHBhZ2luQ291bnRzLnZhbHVlIC0gcHJvcHMucGFnZU51bWJlcnNMaW1pdGVkLCBwYWdpbkNvdW50cy52YWx1ZSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBjYXNlIHBhZ2VOdW1TdGF0dXMubWlkZGxlUGFnZTogew0KICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5nQXJyYXkgPSBnZXRCYXNpY1BhZ2luZ0FycmF5KCk7DQogICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF4SW5kZXggPSBub3dQYWdlTnVtLnZhbHVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1pbkluZGV4ID0gbm93UGFnZU51bS52YWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcHJvcHMucGFnZU51bWJlcnNMaW1pdGVkOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAlIDIgPT09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wID0gbWluSW5kZXggLSAxOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG1wID49IDEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkluZGV4LS07DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF4SW5kZXggPCBwYWdpbkNvdW50cy52YWx1ZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4SW5kZXgrKzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRtcCA9IG1heEluZGV4ICsgMTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRtcCA8PSBwYWdpbkNvdW50cy52YWx1ZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4SW5kZXgrKzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtaW5JbmRleCA+IDEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkluZGV4LS07DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmdBcnJheSA9IHBhZ2luZ0FycmF5LnNsaWNlKG1pbkluZGV4IC0gMSwgbWF4SW5kZXgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBwYWdpbmdBcnJheTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgY29uc3QgaXNQYWdlSXRlbU51bUFjdGl2ZSA9IChpbmRleCkgPT4gew0KICAgICAgICAgICAgcmV0dXJuIGBmLXBhZ2UtaXRlbSBwYWdlLW51bSAke2luZGV4ID09PSBub3dQYWdlTnVtLnZhbHVlID8gJ2FjdGl2ZScgOiAnJ31gOw0KICAgICAgICB9Ow0KDQogICAgICAgIGNvbnN0IGRvUGFnZUl0ZW1BY3RpdmUgPSAocGFnZU51bSkgPT4gew0KICAgICAgICAgICAgbm93UGFnZU51bS52YWx1ZSA9IHBhZ2VOdW07DQogICAgICAgIH07DQoNCiAgICAgICAgY29uc3QgZ2V0TGFuZ05hbWUgPSAod29yZCkgPT4gew0KICAgICAgICAgICAgbGV0IHJlc3VsdCA9ICcnOw0KICAgICAgICAgICAgc3dpdGNoICh3b3JkKSB7DQogICAgICAgICAgICAgICAgY2FzZSAnc2hvdyc6DQogICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5sYW5nID09ICd6aC1UVycpIHJlc3VsdCA9ICfpoa/npLonOw0KICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHMubGFuZyA9PSAnemgtQ04nKSByZXN1bHQgPSAn5pi+56S6JzsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BzLmxhbmcgPT0gJ2VuJykgcmVzdWx0ID0gJ1Nob3cnOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICdlbnRyaWVzJzoNCiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BzLmxhbmcgPT0gJ3poLVRXJykgcmVzdWx0ID0gJ+mghSc7DQogICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5sYW5nID09ICd6aC1DTicpIHJlc3VsdCA9ICfpobknOw0KICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHMubGFuZyA9PSAnZW4nKSByZXN1bHQgPSAnZW50cmllcyc7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KDQogICAgICAgICAgICAgICAgY2FzZSAnc2hvd2luZyc6DQogICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5sYW5nID09ICd6aC1UVycpIHJlc3VsdCA9ICfpoa/npLrnrKwnOw0KICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHMubGFuZyA9PSAnemgtQ04nKSByZXN1bHQgPSAn5pi+56S656ysJzsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BzLmxhbmcgPT0gJ2VuJykgcmVzdWx0ID0gJ1Nob3dpbmcnOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICd0byc6DQogICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5sYW5nID09ICd6aC1UVycpIHJlc3VsdCA9ICfoh7MnOw0KICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHMubGFuZyA9PSAnemgtQ04nKSByZXN1bHQgPSAn6IezJzsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BzLmxhbmcgPT0gJ2VuJykgcmVzdWx0ID0gJ3RvJzsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgY2FzZSAnb2YnOg0KICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHMubGFuZyA9PSAnemgtVFcnKSByZXN1bHQgPSAn6aCF57WQ5p6c77yM5YWxJzsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BzLmxhbmcgPT0gJ3poLUNOJykgcmVzdWx0ID0gJ+mhuee7k+aenO+8jOWFsSc7DQogICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5sYW5nID09ICdlbicpIHJlc3VsdCA9ICdvZic7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICAgICAgfTsNCg0KICAgICAgICBjb25zdCBkaXJlY3RQYWdlTnVtID0gcmVhY3RpdmUocHJvcHMuZGlyZWN0UGFnZU51bSk7DQogICAgICAgIHdhdGNoKA0KICAgICAgICAgICAgZGlyZWN0UGFnZU51bSwNCiAgICAgICAgICAgICgpID0+IHsNCiAgICAgICAgICAgICAgICBpZiAocGFnaW5Db3VudHMudmFsdWUgPj0gZGlyZWN0UGFnZU51bS5wYWdlTnVtKSB7DQogICAgICAgICAgICAgICAgICAgIG5vd1BhZ2VOdW0udmFsdWUgPSBkaXJlY3RQYWdlTnVtLnBhZ2VOdW07DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHsgZGVlcDogdHJ1ZSB9DQogICAgICAgICk7DQoNCiAgICAgICAgaWYgKGF4aW9zQ29uZmlnLnZhbHVlLnVybCAhPT0gJycpIHsNCiAgICAgICAgICAgIGF4aW9zKGF4aW9zQ29uZmlnLnZhbHVlKQ0KICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gew0KICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXNwb25zZS5kYXRhOw0KICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHMuc2VydmVyU2lkZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVNvdXJjZS52YWx1ZSA9IHJlc3BvbnNlRGF0YS5kYXRhLmRhdGE7DQogICAgICAgICAgICAgICAgICAgICAgICB0b3RhbE51bWJlci52YWx1ZSA9IHJlc3BvbnNlRGF0YS5kYXRhLnJlY29yZHNUb3RhbDsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFTb3VyY2UudmFsdWUgPSByZXNwb25zZURhdGEuZGF0YTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsTnVtYmVyLnZhbHVlID0gcmVzcG9uc2VEYXRhLmRhdGEubGVuZ3RoOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgZW1pdCgnYWZ0ZXJEYXRhVXBkYXRlJywgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVNvdXJjZTogZGF0YVNvdXJjZS52YWx1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsTnVtYmVyOiB0b3RhbE51bWJlci52YWx1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VTaXplOiBwYWdlU2l6ZS52YWx1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIG5vd1BhZ2VOdW06IG5vd1BhZ2VOdW0udmFsdWUsDQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhU3RhcnRJbmRleDogZGF0YVN0YXJ0SW5kZXgudmFsdWUsDQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhRW5kSW5kZXg6IGRhdGFFbmRJbmRleC52YWx1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IGZyb20udmFsdWUsDQogICAgICAgICAgICAgICAgICAgICAgICB0bzogdG8udmFsdWUsDQogICAgICAgICAgICAgICAgICAgICAgICBwYWdpbkNvdW50czogcGFnaW5Db3VudHMudmFsdWUsDQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4gew0KICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdlcnJvcjogJXMnLCBlcnJvcik7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgIH0gZWxzZSBpZiAoIXByb3BzLmlzUGFnaW5EYXRhKSB7DQogICAgICAgICAgICBlbWl0KCdhZnRlckRhdGFVcGRhdGUnLCB7DQogICAgICAgICAgICAgICAgZGF0YVNvdXJjZTogZGF0YVNvdXJjZS52YWx1ZS5zbGljZShkYXRhU3RhcnRJbmRleC52YWx1ZSwgZGF0YUVuZEluZGV4LnZhbHVlKSwNCiAgICAgICAgICAgICAgICB0b3RhbE51bWJlcjogdG90YWxOdW1iZXIudmFsdWUsDQogICAgICAgICAgICAgICAgcGFnZVNpemU6IHBhZ2VTaXplLnZhbHVlLA0KICAgICAgICAgICAgICAgIG5vd1BhZ2VOdW06IG5vd1BhZ2VOdW0udmFsdWUsDQogICAgICAgICAgICAgICAgZGF0YVN0YXJ0SW5kZXg6IGRhdGFTdGFydEluZGV4LnZhbHVlLA0KICAgICAgICAgICAgICAgIGRhdGFFbmRJbmRleDogZGF0YUVuZEluZGV4LnZhbHVlLA0KICAgICAgICAgICAgICAgIGZyb206IGZyb20udmFsdWUsDQogICAgICAgICAgICAgICAgdG86IHRvLnZhbHVlLA0KICAgICAgICAgICAgICAgIHBhZ2luQ291bnRzOiBwYWdpbkNvdW50cy52YWx1ZSwNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQoNCiAgICAgICAgY29uc3Qgc3RvcEhhbmRsZSA9IHdhdGNoKFtub3dQYWdlTnVtLCBwYWdlU2l6ZSwgYXhpb3NDb25maWddLCBhc3luYyAoKSA9PiB7DQogICAgICAgICAgICBsZXQgcGFnZURhdGEgPSBkYXRhU291cmNlLnZhbHVlOw0KICAgICAgICAgICAgaWYgKHByb3BzLnNlcnZlclNpZGUpIHsNCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zKGF4aW9zQ29uZmlnLnZhbHVlKTsNCiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzcG9uc2UuZGF0YTsNCiAgICAgICAgICAgICAgICAgICAgZGF0YVNvdXJjZS52YWx1ZSA9IHJlc3BvbnNlRGF0YS5kYXRhLmRhdGE7DQogICAgICAgICAgICAgICAgICAgIHRvdGFsTnVtYmVyLnZhbHVlID0gcmVzcG9uc2VEYXRhLmRhdGEucmVjb3Jkc1RvdGFsOw0KICAgICAgICAgICAgICAgICAgICBwYWdlRGF0YSA9IGRhdGFTb3VyY2UudmFsdWU7DQogICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignZXJyb3I6ICVzJywgZXJyb3IpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXByb3BzLmlzUGFnaW5EYXRhKSB7DQogICAgICAgICAgICAgICAgcGFnZURhdGEgPSBkYXRhU291cmNlLnZhbHVlLnNsaWNlKGRhdGFTdGFydEluZGV4LnZhbHVlLCBkYXRhRW5kSW5kZXgudmFsdWUpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBlbWl0KCdhZnRlckRhdGFVcGRhdGUnLCB7DQogICAgICAgICAgICAgICAgZGF0YVNvdXJjZTogcGFnZURhdGEsDQogICAgICAgICAgICAgICAgdG90YWxOdW1iZXI6IHRvdGFsTnVtYmVyLnZhbHVlLA0KICAgICAgICAgICAgICAgIHBhZ2VTaXplOiBwYWdlU2l6ZS52YWx1ZSwNCiAgICAgICAgICAgICAgICBub3dQYWdlTnVtOiBub3dQYWdlTnVtLnZhbHVlLA0KICAgICAgICAgICAgICAgIGRhdGFTdGFydEluZGV4OiBkYXRhU3RhcnRJbmRleC52YWx1ZSwNCiAgICAgICAgICAgICAgICBkYXRhRW5kSW5kZXg6IGRhdGFFbmRJbmRleC52YWx1ZSwNCiAgICAgICAgICAgICAgICBmcm9tOiBmcm9tLnZhbHVlLA0KICAgICAgICAgICAgICAgIHRvOiB0by52YWx1ZSwNCiAgICAgICAgICAgICAgICBwYWdpbkNvdW50czogcGFnaW5Db3VudHMudmFsdWUsDQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgICAgIG9uVW5tb3VudGVkKCgpID0+IHsNCiAgICAgICAgICAgIHN0b3BIYW5kbGUoKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgIHBhZ2VTaXplLA0KICAgICAgICAgICAgbm93UGFnZU51bSwNCiAgICAgICAgICAgIGRhdGFTb3VyY2UsDQogICAgICAgICAgICB0b3RhbE51bWJlciwNCiAgICAgICAgICAgIGRhdGFTdGFydEluZGV4LA0KICAgICAgICAgICAgZGF0YUVuZEluZGV4LA0KICAgICAgICAgICAgZnJvbSwNCiAgICAgICAgICAgIHRvLA0KICAgICAgICAgICAgcGFnaW5Db3VudHMsDQogICAgICAgICAgICBkaXNhYmxlZFByZXYsDQogICAgICAgICAgICBkaXNhYmxlZE5leHQsDQogICAgICAgICAgICBwYWdpbmdBcnJheSwNCiAgICAgICAgICAgIGlzUGFnZUl0ZW1OdW1BY3RpdmUsDQogICAgICAgICAgICBkb1BhZ2VJdGVtQWN0aXZlLA0KICAgICAgICAgICAgZ2V0TGFuZ05hbWUsDQogICAgICAgIH07DQogICAgfSwNCn07DQo="},null]}