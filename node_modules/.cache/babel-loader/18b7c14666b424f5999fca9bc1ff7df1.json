{"remainingRequest":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\src\\components\\messagecontent.vue?vue&type=script&setup=true&lang=js","dependencies":[{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\src\\components\\messagecontent.vue","mtime":1650432638183},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\babel.config.js","mtime":1647853208515},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCB7IGNyZWF0ZUVsZW1lbnRWTm9kZSBhcyBfY3JlYXRlRWxlbWVudFZOb2RlLCB1bnJlZiBhcyBfdW5yZWYsIG5vcm1hbGl6ZUNsYXNzIGFzIF9ub3JtYWxpemVDbGFzcywgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIHZTaG93IGFzIF92U2hvdywgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCB2TW9kZWxUZXh0IGFzIF92TW9kZWxUZXh0LCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIGNyZWF0ZVRleHRWTm9kZSBhcyBfY3JlYXRlVGV4dFZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrIGFzIF9jcmVhdGVFbGVtZW50QmxvY2ssIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBfY3JlYXRlQ29tbWVudFZOb2RlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIHB1c2hTY29wZUlkIGFzIF9wdXNoU2NvcGVJZCwgcG9wU2NvcGVJZCBhcyBfcG9wU2NvcGVJZCB9IGZyb20gInZ1ZSI7Cgp2YXIgX3dpdGhTY29wZUlkID0gZnVuY3Rpb24gX3dpdGhTY29wZUlkKG4pIHsKICByZXR1cm4gX3B1c2hTY29wZUlkKCJkYXRhLXYtYjlhMzBhZTAiKSwgbiA9IG4oKSwgX3BvcFNjb3BlSWQoKSwgbjsKfTsKCnZhciBfaG9pc3RlZF8xID0gLyojX19QVVJFX18qL193aXRoU2NvcGVJZChmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCB7CiAgICBjbGFzczogInNldEJvYXJkX2N1YmUgY3ViZV90b3BsZWZ0IgogIH0sIFsvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgewogICAgY2xhc3M6ICJzZXRCb2FyZF9jdWJlIGN1YmVfdG9wcmlnaHQiCiAgfSksIC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCB7CiAgICBjbGFzczogInNldEJvYXJkX2N1YmUgY3ViZV9taWRkbGUiCiAgfSksIC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCB7CiAgICBjbGFzczogInNldEJvYXJkX2N1YmUgY3ViZV9ib3R0b20iCiAgfSldLCAtMSk7Cn0pOwoKdmFyIF9ob2lzdGVkXzIgPSB7CiAgY2xhc3M6ICJtc2ctc2VjdGlvbiIKfTsKdmFyIF9ob2lzdGVkXzMgPSB7CiAgY2xhc3M6ICJtZXNzYWdlQ29udGVudCBteC1hdXRvIHB4LW1kLTUgcHgtMyBwb3NpdGlvbi1yZWxhdGl2ZSIKfTsKdmFyIF9ob2lzdGVkXzQgPSB7CiAgY2xhc3M6ICJtc2ctbGFuZy1zd2l0Y2hlciBkLWZsZXgganVzdGlmeS1jb250ZW50LWVuZCBteS00Igp9Owp2YXIgX2hvaXN0ZWRfNSA9IHsKICBjbGFzczogImJ0bi1ncm91cCBsYW5nLXRhYnMiLAogIHJvbGU6ICJncm91cCIsCiAgImFyaWEtbGFiZWwiOiAibGFuZy10YWJzIgp9Owp2YXIgX2hvaXN0ZWRfNiA9IHsKICBjbGFzczogIm1zZy1jb250ZW50Igp9OwoKdmFyIF9ob2lzdGVkXzcgPSAvKiNfX1BVUkVfXyovX3dpdGhTY29wZUlkKGZ1bmN0aW9uICgpIHsKICByZXR1cm4gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIHsKICAgICJkYXRhLWZsLW5hbWUiOiAiaTE4bklkIiwKICAgIGhpZGRlbjogIiIKICB9LCAiSTE4TjAwNyIsIC0xKTsKfSk7Cgp2YXIgX2hvaXN0ZWRfOCA9IHsKICBjbGFzczogIm1zZy1oZWFkIGNsaWNrMmVkaXQgbWItMiIKfTsKCnZhciBfaG9pc3RlZF85ID0gLyojX19QVVJFX18qL193aXRoU2NvcGVJZChmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJociIsIHsKICAgIGNsYXNzOiAibXktNCIKICB9LCBudWxsLCAtMSk7Cn0pOwoKdmFyIF9ob2lzdGVkXzEwID0gewogIGNsYXNzOiAidGV4dC1jb250ZW50IiwKICAiZGF0YS1mbC1uYW1lIjogImNvbnRlbnQiCn07CnZhciBfaG9pc3RlZF8xMSA9IHsKICBjbGFzczogInRleHQtYXJlYSIsCiAgc3R5bGU6IHsKICAgICJtYXJnaW4tYm90dG9tIjogIjAuNXJlbSIKICB9Cn07CnZhciBfaG9pc3RlZF8xMiA9IHsKICBjbGFzczogIm1zZy1ib2R5IiwKICBzdHlsZTogewogICAgIm1hcmdpbiI6ICIwIDAgMXJlbSAwIgogIH0KfTsKdmFyIF9ob2lzdGVkXzEzID0gewogIGNsYXNzOiAidW5lZGl0YWJsZSIsCiAgc3R5bGU6IHsKICAgICJtYXJnaW4iOiAiMCAwIDNyZW0gMCIKICB9Cn07CnZhciBfaG9pc3RlZF8xNCA9IFsiaW5uZXJIVE1MIl07CnZhciBfaG9pc3RlZF8xNSA9IHsKICBjbGFzczogImNsaWNrMmVkaXQiLAogIHN0eWxlOiB7fQp9Owp2YXIgX2hvaXN0ZWRfMTYgPSBbImlubmVySFRNTCJdOwp2YXIgX2hvaXN0ZWRfMTcgPSB7CiAgY2xhc3M6ICJtc2ctZm9vdGVyIgp9Owp2YXIgX2hvaXN0ZWRfMTggPSBbImlubmVySFRNTCJdOwoKdmFyIF9ob2lzdGVkXzE5ID0gLyojX19QVVJFX18qL193aXRoU2NvcGVJZChmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCB7CiAgICBjbGFzczogImRlY28td3JhcHBlciBwLTAiCiAgfSwgWy8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJpIiwgewogICAgY2xhc3M6ICJmYXMgZmEtZXhjbGFtYXRpb24tdHJpYW5nbGUgZmEtMTB4IgogIH0pXSwgLTEpOwp9KTsKCnZhciBfaG9pc3RlZF8yMCA9IHsKICBjbGFzczogInNlbmRCeS13cmFwcGVyIG10LTMiCn07CnZhciBfaG9pc3RlZF8yMSA9IHsKICBjbGFzczogInJvdyBnLTAiCn07Cgp2YXIgX2hvaXN0ZWRfMjIgPSAvKiNfX1BVUkVfXyovX3dpdGhTY29wZUlkKGZ1bmN0aW9uICgpIHsKICByZXR1cm4gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIHsKICAgIGNsYXNzOiAiY29sLWxnLTggY29sLW1kLTYiCiAgfSwgWy8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJociIpXSwgLTEpOwp9KTsKCnZhciBfaG9pc3RlZF8yMyA9IHsKICBjbGFzczogImNvbC1sZy00IGNvbC1tZC02IHNlbmRCeSB0ZXh0LWNlbnRlciIKfTsKCnZhciBfaG9pc3RlZF8yNCA9IC8qI19fUFVSRV9fKi9fd2l0aFNjb3BlSWQoZnVuY3Rpb24gKCkgewogIHJldHVybiAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIHsKICAgIGNsYXNzOiAidGV4dC1tdXRlZCIKICB9LCBbLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoImkiLCB7CiAgICBjbGFzczogImZhcyBmYS1wYXBlci1wbGFuZSBwZS0xIgogIH0pLCAvKiNfX1BVUkVfXyovX2NyZWF0ZVRleHRWTm9kZSgiIOWvhOmAgeaWueW8jzogIildLCAtMSk7Cn0pOwoKdmFyIF9ob2lzdGVkXzI1ID0gewogIGNsYXNzOiAiYWN0aXZlLW1hcmsgcm91bmRlZC1jaXJjbGUgdGV4dC1jZW50ZXIiCn07Cgp2YXIgX2hvaXN0ZWRfMjYgPSAvKiNfX1BVUkVfXyovX3dpdGhTY29wZUlkKGZ1bmN0aW9uICgpIHsKICByZXR1cm4gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoImkiLCB7CiAgICBjbGFzczogImZhcyBmYS1jaGVjayIKICB9LCBudWxsLCAtMSk7Cn0pOwoKdmFyIF9ob2lzdGVkXzI3ID0gW19ob2lzdGVkXzI2XTsKCnZhciBfaG9pc3RlZF8yOCA9IC8qI19fUFVSRV9fKi9fd2l0aFNjb3BlSWQoZnVuY3Rpb24gKCkgewogIHJldHVybiAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgiaSIsIHsKICAgIGNsYXNzOiAiZmFzIGZhLWVudmVsb3BlLXNxdWFyZSB0ZXJ0aWFyeS1jb2xvciBmYS0yeCIKICB9LCBudWxsLCAtMSk7Cn0pOwoKdmFyIF9ob2lzdGVkXzI5ID0gewogIGtleTogMCwKICBjbGFzczogImJ0bi13cmFwcGVyIHctMTAwIHRleHQtY2VudGVyIG15LTMgZC1ibG9jayIKfTsKCnZhciBfaG9pc3RlZF8zMCA9IC8qI19fUFVSRV9fKi9fd2l0aFNjb3BlSWQoZnVuY3Rpb24gKCkgewogIHJldHVybiAvKiNfX1BVUkVfXyovX2NyZWF0ZUVsZW1lbnRWTm9kZSgic3BhbiIsIHsKICAgIGNsYXNzOiAibWF0ZXJpYWwtaWNvbnMiCiAgfSwgIiBkYXNoYm9hcmQgIiwgLTEpOwp9KTsKCnZhciBfaG9pc3RlZF8zMSA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVGV4dFZOb2RlKCIg6Kit54K656+E5pysICIpOwoKdmFyIF9ob2lzdGVkXzMyID0gW19ob2lzdGVkXzMwLCBfaG9pc3RlZF8zMV07CmltcG9ydCB7IHVzZVN0b3JlIH0gZnJvbSAidnVleCI7CmltcG9ydCB7IHJlZiwgd2F0Y2gsIHdhdGNoRWZmZWN0IH0gZnJvbSAidnVlIjsKaW1wb3J0IEVkaXRvciBmcm9tICJja2VkaXRvcjUtY3VzdG9tLWJ1aWxkLWZ1bGwyL2J1aWxkL2NrZWRpdG9yLmpzIjsgLy8g5a6J6KOd57ay6Lev5LiK5pyJ5Lq65pW055CG5aW955qE6Z2e5a6Y5pa55YyFCgppbXBvcnQgJ0Bja2VkaXRvci9ja2VkaXRvcjUtYnVpbGQtY2xhc3NpYy9idWlsZC90cmFuc2xhdGlvbnMvcHQnOwpleHBvcnQgZGVmYXVsdCB7CiAgc2V0dXA6IGZ1bmN0aW9uIHNldHVwKF9fcHJvcHMpIHsKICAgIHZhciBzdG9yZSA9IHVzZVN0b3JlKCk7CiAgICB2YXIgZWRpdG9yID0gcmVmKEVkaXRvcik7CiAgICB2YXIgZWRpdG9yQ29udGVudCA9IHJlZignJyk7CiAgICB2YXIgZWRpdG9yQ29uZmlnID0gcmVmKHsKICAgICAgdG9vbGJhcjogewogICAgICAgIGl0ZW1zOiBbJ2JvbGQnLCAndW5kbycsICdyZWRvJywgJ2hlYWRpbmcnXQogICAgICB9CiAgICB9KTsKICAgIHZhciBlZGl0VGl0bGUgPSByZWYoJycpOwogICAgdmFyIHVuZWRpdENvbnRlbnRUb3AgPSByZWYoJycpOwogICAgdmFyIHVuZWRpdENvbnRlbnRGb290ZXIgPSByZWYoJycpOwoKICAgIHZhciBzd2l0Y2hNc2dMYW5nID0gZnVuY3Rpb24gc3dpdGNoTXNnTGFuZyhsYW5nKSB7CiAgICAgIGlmIChzdG9yZS5zdGF0ZS5lZGl0U3RhdHVzICYmIHN0b3JlLnN0YXRlLnNhdmVTdGF0dXMpIHsKICAgICAgICBhZGRNc2dTYXZlQm9keSh7CiAgICAgICAgICB0aXRsZTogZWRpdFRpdGxlLAogICAgICAgICAgY29udGVudDogZWRpdG9yQ29udGVudCwKICAgICAgICAgIGNvbnRlbnRUb3A6IHVuZWRpdENvbnRlbnRUb3AsCiAgICAgICAgICBjb250ZW50Qm90dG9tOiB1bmVkaXRDb250ZW50Rm9vdGVyCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHN0b3JlLmNvbW1pdCgnc2V0TXNnTGFuZycsIGxhbmcpOwogICAgfTsKCiAgICB2YXIgb3Blbk1vZGFsID0gZnVuY3Rpb24gb3Blbk1vZGFsKCkgewogICAgICBhZGRNc2dTYXZlQm9keSh7CiAgICAgICAgdGl0bGU6IGVkaXRUaXRsZSwKICAgICAgICBjb250ZW50OiBlZGl0b3JDb250ZW50LAogICAgICAgIGNvbnRlbnRUb3A6IHVuZWRpdENvbnRlbnRUb3AsCiAgICAgICAgY29udGVudEJvdHRvbTogdW5lZGl0Q29udGVudEZvb3RlcgogICAgICB9KTsKICAgICAgc3RvcmUuY29tbWl0KCdvcGVuQWRkTW9kYWwnKTsKICAgIH07CgogICAgdmFyIHN3aXRjaFNlbmRUeXBlTGlzdCA9IGZ1bmN0aW9uIHN3aXRjaFNlbmRUeXBlTGlzdCgpIHsKICAgICAgc3RvcmUuY29tbWl0KCdzZXRTZW5kVHlwZUxpc3QnKTsKICAgIH07CgogICAgdmFyIGFkZE1zZ1NhdmVCb2R5ID0gZnVuY3Rpb24gYWRkTXNnU2F2ZUJvZHkobXNnQm9keSkgewogICAgICBzdG9yZS5jb21taXQoJ2FkZE1zZ1NhdmVCb2R5JywgbXNnQm9keSk7CiAgICB9OwoKICAgIHZhciBnZXRQYXJ0RnJvbUFwaURhdGEgPSBmdW5jdGlvbiBnZXRQYXJ0RnJvbUFwaURhdGEocGFydCwgc3RyaW5nKSB7CiAgICAgIHZhciBfc3RvcmUkZ2V0dGVycyRzaG93TXM7CgogICAgICBpZiAoKF9zdG9yZSRnZXR0ZXJzJHNob3dNcyA9IHN0b3JlLmdldHRlcnMuc2hvd01zZykgIT09IG51bGwgJiYgX3N0b3JlJGdldHRlcnMkc2hvd01zICE9PSB2b2lkIDAgJiYgX3N0b3JlJGdldHRlcnMkc2hvd01zLmkxOG5MaXN0KSB7CiAgICAgICAgdmFyIF9zdG9yZSRnZXR0ZXJzJHNob3dNczIsIF9wYXJzZXIkZ2V0RWxlbWVudHNCeTsKCiAgICAgICAgdmFyIGFwaURhdGEgPSAoX3N0b3JlJGdldHRlcnMkc2hvd01zMiA9IHN0b3JlLmdldHRlcnMuc2hvd01zZykgPT09IG51bGwgfHwgX3N0b3JlJGdldHRlcnMkc2hvd01zMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlJGdldHRlcnMkc2hvd01zMi5pMThuTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHJldHVybiBpdGVtLmxhbmcgPT09IHN0b3JlLnN0YXRlLm1zZ0xhbmc7CiAgICAgICAgfSlbMF0uY29udGVudDsKICAgICAgICB2YXIgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhhcGlEYXRhLCAndGV4dC9odG1sJyk7CiAgICAgICAgdmFyIGFwaURhdGFDb250ZW50ID0gKF9wYXJzZXIkZ2V0RWxlbWVudHNCeSA9IHBhcnNlci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHN0cmluZylbMF0pID09PSBudWxsIHx8IF9wYXJzZXIkZ2V0RWxlbWVudHNCeSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3BhcnNlciRnZXRFbGVtZW50c0J5LmlubmVySFRNTDsKICAgICAgICBwYXJ0LnZhbHVlID0gYXBpRGF0YUNvbnRlbnQgfHwgJyAnOwogICAgICB9CiAgICB9OwoKICAgIHdhdGNoRWZmZWN0KGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKHN0b3JlLnN0YXRlLm1zZ0FkZC5jb250ZW50W3N0b3JlLnN0YXRlLm1zZ0xhbmddIHx8IHN0b3JlLnN0YXRlLm1zZ0FkZC50aXRsZVtzdG9yZS5zdGF0ZS5tc2dMYW5nXSkgewogICAgICAgIGVkaXRvckNvbnRlbnQudmFsdWUgPSBzdG9yZS5zdGF0ZS5tc2dBZGQuY29udGVudFtzdG9yZS5zdGF0ZS5tc2dMYW5nXTsKICAgICAgICBlZGl0VGl0bGUudmFsdWUgPSBzdG9yZS5zdGF0ZS5tc2dBZGQudGl0bGVbc3RvcmUuc3RhdGUubXNnTGFuZ107CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIF9zdG9yZSRnZXR0ZXJzJHNob3dNczM7CgogICAgICAgIGdldFBhcnRGcm9tQXBpRGF0YShlZGl0b3JDb250ZW50LCAnY2xpY2syZWRpdCcpOwogICAgICAgIGdldFBhcnRGcm9tQXBpRGF0YSh1bmVkaXRDb250ZW50VG9wLCAndW5lZGl0YWJsZScpOwogICAgICAgIGdldFBhcnRGcm9tQXBpRGF0YSh1bmVkaXRDb250ZW50Rm9vdGVyLCAnbXNnLWZvb3RlcicpOwogICAgICAgIGVkaXRUaXRsZS52YWx1ZSA9IChfc3RvcmUkZ2V0dGVycyRzaG93TXMzID0gc3RvcmUuZ2V0dGVycy5zaG93TXNnKSA9PT0gbnVsbCB8fCBfc3RvcmUkZ2V0dGVycyRzaG93TXMzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RvcmUkZ2V0dGVycyRzaG93TXMzLmkxOG5MaXN0LmZpbHRlcihmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgcmV0dXJuIGl0ZW0ubGFuZyA9PT0gc3RvcmUuc3RhdGUubXNnTGFuZzsKICAgICAgICB9KVswXS50aXRsZTsKICAgICAgfQogICAgfSk7CiAgICB3YXRjaChmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBzdG9yZS5zdGF0ZS5zYXZlU3RhdHVzOwogICAgfSwgZnVuY3Rpb24gKCkgewogICAgICBpZiAoc3RvcmUuc3RhdGUuc2F2ZVN0YXR1cykgewogICAgICAgIGFkZE1zZ1NhdmVCb2R5KHsKICAgICAgICAgIHRpdGxlOiBlZGl0VGl0bGUsCiAgICAgICAgICBjb250ZW50OiBlZGl0b3JDb250ZW50LAogICAgICAgICAgY29udGVudFRvcDogdW5lZGl0Q29udGVudFRvcCwKICAgICAgICAgIGNvbnRlbnRCb3R0b206IHVuZWRpdENvbnRlbnRGb290ZXIKICAgICAgICB9KTsKICAgICAgICBzdG9yZS5kaXNwYXRjaCgnaGFuZFNhdmUnKTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gZnVuY3Rpb24gKF9jdHgsIF9jYWNoZSkgewogICAgICB2YXIgX2NvbXBvbmVudF9ja2VkaXRvciA9IF9yZXNvbHZlQ29tcG9uZW50KCJja2VkaXRvciIpOwoKICAgICAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhfRnJhZ21lbnQsIG51bGwsIFtfaG9pc3RlZF8xLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8yLCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMywgW19jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzQsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF81LCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiYnV0dG9uIiwgewogICAgICAgIG9uQ2xpY2s6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgcmV0dXJuIHN3aXRjaE1zZ0xhbmcoJ3poLVRXJyk7CiAgICAgICAgfSksCiAgICAgICAgY2xhc3M6IF9ub3JtYWxpemVDbGFzcyhbewogICAgICAgICAgYWN0aXZlOiBfdW5yZWYoc3RvcmUpLnN0YXRlLm1zZ0xhbmcgPT09ICd6aC1UVycKICAgICAgICB9LCAiYnRuIGxhbmdTd2l0Y2hCdG4iXSksCiAgICAgICAgdHlwZTogImJ1dHRvbiIsCiAgICAgICAgdmFsdWU6ICJ6aC1UVyIKICAgICAgfSwgIiDmraMgIiwgMiksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImJ1dHRvbiIsIHsKICAgICAgICBvbkNsaWNrOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgIHJldHVybiBzd2l0Y2hNc2dMYW5nKCd6aC1DTicpOwogICAgICAgIH0pLAogICAgICAgIGNsYXNzOiBfbm9ybWFsaXplQ2xhc3MoW3sKICAgICAgICAgIGFjdGl2ZTogX3VucmVmKHN0b3JlKS5zdGF0ZS5tc2dMYW5nID09PSAnemgtQ04nCiAgICAgICAgfSwgImJ0biBsYW5nU3dpdGNoQnRuIl0pLAogICAgICAgIHR5cGU6ICJidXR0b24iLAogICAgICAgIHZhbHVlOiAiemgtQ04iCiAgICAgIH0sICIg566AICIsIDIpLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJidXR0b24iLCB7CiAgICAgICAgb25DbGljazogX2NhY2hlWzJdIHx8IChfY2FjaGVbMl0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICByZXR1cm4gc3dpdGNoTXNnTGFuZygnZW4nKTsKICAgICAgICB9KSwKICAgICAgICBjbGFzczogX25vcm1hbGl6ZUNsYXNzKFt7CiAgICAgICAgICBhY3RpdmU6IF91bnJlZihzdG9yZSkuc3RhdGUubXNnTGFuZyA9PT0gJ2VuJwogICAgICAgIH0sICJidG4gbGFuZ1N3aXRjaEJ0biJdKSwKICAgICAgICB0eXBlOiAiYnV0dG9uIiwKICAgICAgICB2YWx1ZTogImVuIgogICAgICB9LCAiIEVOICIsIDIpXSldKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfNiwgW19ob2lzdGVkXzcsIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzgsIFtfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgewogICAgICAgIGNsYXNzOiAiY2FyZC10aXRsZSBmb250LXdlaWdodC1ib2xkIG1iLTAiLAogICAgICAgICJkYXRhLWZsLW5hbWUiOiAidGl0bGUiCiAgICAgIH0sIF90b0Rpc3BsYXlTdHJpbmcoZWRpdFRpdGxlLnZhbHVlKSwgNTEzKSwgW1tfdlNob3csICFfdW5yZWYoc3RvcmUpLnN0YXRlLmVkaXRTdGF0dXNdXSksIF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlRWxlbWVudFZOb2RlKCJpbnB1dCIsIHsKICAgICAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVszXSB8fCAoX2NhY2hlWzNdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgcmV0dXJuIGVkaXRUaXRsZS52YWx1ZSA9ICRldmVudDsKICAgICAgICB9KSwKICAgICAgICBjbGFzczogImNhcmQtdGl0bGUgZm9udC13ZWlnaHQtYm9sZCBtYi0wIgogICAgICB9LCBudWxsLCA1MTIpLCBbW192U2hvdywgX3VucmVmKHN0b3JlKS5zdGF0ZS5lZGl0U3RhdHVzXSwgW192TW9kZWxUZXh0LCBlZGl0VGl0bGUudmFsdWVdXSldKSwgX2hvaXN0ZWRfOSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMTAsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8xMSwgW19jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzEyLCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMTMsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCB7CiAgICAgICAgaW5uZXJIVE1MOiB1bmVkaXRDb250ZW50VG9wLnZhbHVlCiAgICAgIH0sIG51bGwsIDgsIF9ob2lzdGVkXzE0KV0pLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJzcGFuIiwgX2hvaXN0ZWRfMTUsIFtfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgewogICAgICAgIGlubmVySFRNTDogZWRpdG9yQ29udGVudC52YWx1ZQogICAgICB9LCBudWxsLCA4LCBfaG9pc3RlZF8xNiksIFtbX3ZTaG93LCAhX3VucmVmKHN0b3JlKS5zdGF0ZS5lZGl0U3RhdHVzXV0pLCBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgbnVsbCwgW19jcmVhdGVWTm9kZShfY29tcG9uZW50X2NrZWRpdG9yLCB7CiAgICAgICAgZWRpdG9yOiBlZGl0b3IudmFsdWUsCiAgICAgICAgbW9kZWxWYWx1ZTogZWRpdG9yQ29udGVudC52YWx1ZSwKICAgICAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVs0XSB8fCAoX2NhY2hlWzRdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgcmV0dXJuIGVkaXRvckNvbnRlbnQudmFsdWUgPSAkZXZlbnQ7CiAgICAgICAgfSksCiAgICAgICAgY29uZmlnOiBlZGl0b3JDb25maWcudmFsdWUKICAgICAgfSwgbnVsbCwgOCwgWyJlZGl0b3IiLCAibW9kZWxWYWx1ZSIsICJjb25maWciXSldLCA1MTIpLCBbW192U2hvdywgX3VucmVmKHN0b3JlKS5zdGF0ZS5lZGl0U3RhdHVzXV0pXSldKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMTcsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCB7CiAgICAgICAgaW5uZXJIVE1MOiB1bmVkaXRDb250ZW50Rm9vdGVyLnZhbHVlCiAgICAgIH0sIG51bGwsIDgsIF9ob2lzdGVkXzE4KV0pXSldKSwgX2hvaXN0ZWRfMTldKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMjAsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8yMSwgW19ob2lzdGVkXzIyLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8yMywgW19ob2lzdGVkXzI0LCBfY3JlYXRlRWxlbWVudFZOb2RlKCJidXR0b24iLCB7CiAgICAgICAgb25DbGljazogX2NhY2hlWzVdIHx8IChfY2FjaGVbNV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICByZXR1cm4gc3dpdGNoU2VuZFR5cGVMaXN0KCk7CiAgICAgICAgfSksCiAgICAgICAgY2xhc3M6IF9ub3JtYWxpemVDbGFzcyhbImJ0biBwLTAgYnRuLW5vdGlmeSBhY3RpdmUgcG9zaXRpb24tcmVsYXRpdmUiLCB7CiAgICAgICAgICBkaXNhYmxlZDogIV91bnJlZihzdG9yZSkuc3RhdGUuZWRpdFN0YXR1cwogICAgICAgIH1dKSwKICAgICAgICAiZGF0YS1mbC1ub3RpZnl3YXkiOiAiTUFJTCIKICAgICAgfSwgW193aXRoRGlyZWN0aXZlcyhfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8yNSwgX2hvaXN0ZWRfMjcsIDUxMiksIFtbX3ZTaG93LCBfdW5yZWYoc3RvcmUpLnN0YXRlLm1zZ0FkZC5zZW5kVHlwZUxpc3QgIT09ICJbXSJdXSksIF9ob2lzdGVkXzI4XSwgMildKV0pXSksIF91bnJlZihzdG9yZSkuc3RhdGUuZWRpdFN0YXR1cyA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIF9ob2lzdGVkXzI5LCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiYnV0dG9uIiwgewogICAgICAgIG9uQ2xpY2s6IF9jYWNoZVs2XSB8fCAoX2NhY2hlWzZdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgcmV0dXJuIG9wZW5Nb2RhbCgpOwogICAgICAgIH0pLAogICAgICAgIGNsYXNzOiAiYnRuU2V0TW9kZWwgYnRuIGJ0bi1wcmltYXJ5IHJvdW5kZWQtMCBweC00IHB5LTIiCiAgICAgIH0sIF9ob2lzdGVkXzMyKV0pKSA6IF9jcmVhdGVDb21tZW50Vk5vZGUoIiIsIHRydWUpXSldKV0sIDY0KTsKICAgIH07CiAgfQp9Ow=="},null]}