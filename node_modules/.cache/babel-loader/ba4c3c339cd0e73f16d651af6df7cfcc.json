{"remainingRequest":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\src\\components\\comm\\modal.vue?vue&type=script&setup=true&lang=js","dependencies":[{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\src\\components\\comm\\modal.vue","mtime":1650266550138},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\babel.config.js","mtime":1647853208515},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}