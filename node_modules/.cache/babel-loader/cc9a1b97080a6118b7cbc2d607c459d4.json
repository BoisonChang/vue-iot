{"remainingRequest":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\eslint-loader\\index.js??ref--14-0!C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\src\\store\\messageSetting\\index.js","dependencies":[{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\src\\store\\messageSetting\\index.js","mtime":1650427334752},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\babel.config.js","mtime":1647853208515},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}