{"remainingRequest":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\src\\components\\comm\\FPagination.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\src\\components\\comm\\FPagination.vue","mtime":1648203704692},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\babel.config.js","mtime":1647853208515},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Boison Chang\\Desktop\\connesia_cli_vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6L1VzZXJzL0JvaXNvbiBDaGFuZy9EZXNrdG9wL2Nvbm5lc2lhX2NsaV92dWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIkM6L1VzZXJzL0JvaXNvbiBDaGFuZy9EZXNrdG9wL2Nvbm5lc2lhX2NsaV92dWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICJDOi9Vc2Vycy9Cb2lzb24gQ2hhbmcvRGVza3RvcC9jb25uZXNpYV9jbGlfdnVlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIjsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IHsgcmVmLCByZWFjdGl2ZSwgY29tcHV0ZWQsIHdhdGNoLCBvblVubW91bnRlZCB9IGZyb20gJ3Z1ZSc7CnZhciBwYWdlTnVtU3RhdHVzID0gewogIGZpcnN0UGFnZTogMCwKICBsYXN0UGFnZTogMSwKICBtaWRkbGVQYWdlOiAyCn07Cgp2YXIgUGFnaW5TZXJ2ZXJTaWRlSW5mbyA9IC8qI19fUFVSRV9fKi9fY3JlYXRlQ2xhc3MoZnVuY3Rpb24gUGFnaW5TZXJ2ZXJTaWRlSW5mbyhzdGFydCwgbGVuZ3RoLCBmaWx0ZXIpIHsKICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFnaW5TZXJ2ZXJTaWRlSW5mbyk7CgogIHRoaXMuc3RhcnQgPSBzdGFydDsKICB0aGlzLmxlbmd0aCA9IGxlbmd0aDsKICB0aGlzLmZpbHRlciA9IGZpbHRlcjsKfSk7CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0ZQYWdpbmF0aW9uJywKICBwcm9wczogewogICAgLyoqDQogICAgICogU2V0IHRoZSBzaXplIGxpc3QgbWVudSBvZiBwYWdpbmF0aW9uLg0KICAgICAqLwogICAgcGFnZVNpemVNZW51OiB7CiAgICAgIHR5cGU6IEFycmF5LAogICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gWzEwLCAyNSwgNTAsIDc1LCAxMDBdOwogICAgICB9CiAgICB9LAoKICAgIC8qKg0KICAgICAqIFNldCB0aGUgc3RhdGljIGRhdGEgc291cmNlIG9mIHBhZ2luYXRpb24uDQogICAgICovCiAgICBkYXRhQXJyYXk6IHsKICAgICAgdHlwZTogQXJyYXksCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgfSwKCiAgICAvKioNCiAgICAgKiBJcyBzb3VyY2UgZnJvbSBhIHBhZ2luRGF0YS4NCiAgICAgKi8KICAgIGlzUGFnaW5EYXRhOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAoKICAgIC8qKg0KICAgICAqIElmIHNvdXJjZSBpcyBmcm9tIGEgcGFnaW5EYXRhIHRoZW4geW91IGhhdmUgdG8gdGVsbCBob3cgbWFueSBkYXRhIGlzLA0KICAgICAqIG9yIHRoZSBwYWdpbiB3b24ndCB3b3JrIGN1cnJlbnQuDQogICAgICovCiAgICB0b3RhbERhdGFMZW5ndGg6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAwCiAgICB9LAoKICAgIC8qKg0KICAgICAqIEVuYWJsZSBzaG93IGFsbCBwYWdpbiBudW1iZXJzLg0KICAgICAqLwogICAgc2hvd0FsbFBhZ2VOdW1iZXI6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogdHJ1ZQogICAgfSwKCiAgICAvKioNCiAgICAgKiBJZiBzaG93QWxsUGFnZU51bWJlciBpcyBzZXQgdG8gZmFsc2UsIHRoZW4geW91IGNhbiBzZXQgdGhpcyBwYXJhbQ0KICAgICAqIHRvIGxpbWl0ZWQgaG93IG1hbnkgcGFnaW4gc2hvd3MgaW4sIHRoZSBvdGhlciB3aWxsIGJlIHJlcGxhY2UgYnkgIm1vcmUiIGljb24uDQogICAgICovCiAgICBwYWdlTnVtYmVyc0xpbWl0ZWQ6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiA1CiAgICB9LAoKICAgIC8qKg0KICAgICAqIEVuYWJsZSB0aGUgZmlyc3QgcGFnZSBidXR0b24uDQogICAgICovCiAgICBpc0VuYWJsZUZpcnN0UGFnZUJ0bjogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKCiAgICAvKioNCiAgICAgKiBFbmFibGUgdGhlIGxhc3QgcGFnZSBidXR0b24uDQogICAgICovCiAgICBpc0VuYWJsZUxhc3RQYWdlQnRuOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAoKICAgIC8qKg0KICAgICAqIFNldCBlYWNoIHBhZ2UgZGF0YSBpcyBmcm9tIHNlcnZlciBvbiBlYWNoIGxvYWRpbmcgd2hpbGUgcGFnZSBudW0gY2hhbmdlZC4NCiAgICAgKi8KICAgIHNlcnZlclNpZGU6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCgogICAgLyoqDQogICAgICogU2V0IGRhdGEgZnJvbSBhamF4LCB0aGUgYWpheCdzIHNldHRpbmcuDQogICAgICogTk9USUNFOiBpZiB0aGlzIG9wdGlvbiBoYXMgYmVlbiBzZXQsIHRoZSBvcHRpb24gImRhdGFBcnJheSIgd2lsbCBiZSBhYm9ydC4NCiAgICAgKi8KICAgIGF4aW9zQ29uZmlnT3B0czogewogICAgICB0eXBlOiBPYmplY3QsCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiB7fTsKICAgICAgfQogICAgfSwKCiAgICAvKioNCiAgICAgKiBTZXQgZGlyZWN0IHBhZ2UgbnVtIHByb2dyYW1tYXRpY2FsbHkuDQogICAgICogVGhlIHRyaWdnZXJJZCBoYXZlIHRvIHNldCB3aXRoIGEgcmFuZG9tIGlkLA0KICAgICAqIGVhY2ggY2FsbCBtdXN0IGJlIHNldCBkaWZmZXJlbnQgdHJpZ2dlcklkLA0KICAgICAqIHNvIHRoYXQgd2F0Y2ggd2lsbCBiZSB0cmlnZ2VyZWQuDQogICAgICogRWc6IHtwYWdlTnVtOiAxLCB0cmlnZ2VySWQ6IE1hdGgucmFuZG9tKCl9DQogICAgICovCiAgICBkaXJlY3RQYWdlTnVtOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHBhZ2VOdW06IDEsCiAgICAgICAgICB0cmlnZ2VySWQ6ICcnCiAgICAgICAgfTsKICAgICAgfQogICAgfSwKCiAgICAvKioNCiAgICAgKiBjb21wb25lbnQgZGlzcGxheSBsYW5ndWFnZS4NCiAgICAgKi8KICAgIGxhbmc6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnemgtVFcnCiAgICB9CiAgfSwKICBlbWl0czogWwogIC8qKg0KICAgKiBTZXQgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGFmdGVyIHBhZ2UgbnVtIGNoYW5nZWQgYW5kIGRhdGEgbG9hZGVkLg0KICAgKiBlbWl0IG5hbWU6IGFmdGVyRGF0YVVwZGF0ZQ0KICAgKi8KICAnYWZ0ZXJEYXRhVXBkYXRlJ10sCiAgc2V0dXA6IGZ1bmN0aW9uIHNldHVwKHByb3BzLCBfcmVmKSB7CiAgICB2YXIgZW1pdCA9IF9yZWYuZW1pdDsKICAgIHZhciBwYWdlU2l6ZSA9IHJlZihwcm9wcy5wYWdlU2l6ZU1lbnVbMF0pOwogICAgdmFyIG5vd1BhZ2VOdW0gPSByZWYoMSk7CiAgICB2YXIgZGF0YVNvdXJjZSA9IHJlZihwcm9wcy5kYXRhQXJyYXkpOwogICAgdmFyIHRvdGFsTnVtYmVyID0gcmVmKHByb3BzLmlzUGFnaW5EYXRhID8gcHJvcHMudG90YWxEYXRhTGVuZ3RoIDogcHJvcHMuZGF0YUFycmF5Lmxlbmd0aCk7CiAgICB2YXIgYXhpb3NDb25maWcgPSBjb21wdXRlZChmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBjb25maWcgPSBPYmplY3QuYXNzaWduKHsKICAgICAgICB1cmw6ICcnLAogICAgICAgIG1ldGhvZDogJ3Bvc3QnLAogICAgICAgIGRhdGE6IHt9LAogICAgICAgIHBhcmFtczoge30sCiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgQ29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JwogICAgICAgIH0KICAgICAgfSwgcHJvcHMuYXhpb3NDb25maWdPcHRzKTsKCiAgICAgIGlmIChwcm9wcy5zZXJ2ZXJTaWRlKSB7CiAgICAgICAgY29uZmlnLmRhdGEgPSBuZXcgUGFnaW5TZXJ2ZXJTaWRlSW5mbyhkYXRhU3RhcnRJbmRleC52YWx1ZSwgcGFnZVNpemUudmFsdWUsIHByb3BzLmF4aW9zQ29uZmlnT3B0cy5kYXRhKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGNvbmZpZzsKICAgIH0pOwogICAgdmFyIGRhdGFTdGFydEluZGV4ID0gY29tcHV0ZWQoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gbm93UGFnZU51bS52YWx1ZSAqIHBhZ2VTaXplLnZhbHVlIC0gcGFnZVNpemUudmFsdWU7CiAgICB9KTsKICAgIHZhciBkYXRhRW5kSW5kZXggPSBjb21wdXRlZChmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBub3dQYWdlTnVtLnZhbHVlICogcGFnZVNpemUudmFsdWU7CiAgICB9KTsKICAgIHZhciBmcm9tID0gY29tcHV0ZWQoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gdG90YWxOdW1iZXIudmFsdWUgPiAwID8gZGF0YVN0YXJ0SW5kZXgudmFsdWUgKyAxIDogMDsKICAgIH0pOwogICAgdmFyIHRvID0gY29tcHV0ZWQoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gdG90YWxOdW1iZXIudmFsdWUgPiBkYXRhRW5kSW5kZXgudmFsdWUgPyBkYXRhRW5kSW5kZXgudmFsdWUgOiB0b3RhbE51bWJlci52YWx1ZTsKICAgIH0pOwogICAgdmFyIHBhZ2luQ291bnRzID0gY29tcHV0ZWQoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gTWF0aC5jZWlsKHRvdGFsTnVtYmVyLnZhbHVlIC8gcGFnZVNpemUudmFsdWUpOwogICAgfSk7CiAgICB2YXIgbm93UGFnZU51bVN0YXR1cyA9IGNvbXB1dGVkKGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKG5vd1BhZ2VOdW0udmFsdWUgPT09IDEpIHsKICAgICAgICByZXR1cm4gMDsKICAgICAgfQoKICAgICAgaWYgKG5vd1BhZ2VOdW0udmFsdWUgPT09IHRvdGFsTnVtYmVyLnZhbHVlKSB7CiAgICAgICAgcmV0dXJuIDE7CiAgICAgIH0KCiAgICAgIHJldHVybiAyOwogICAgfSk7CiAgICB2YXIgZGlzYWJsZWRQcmV2ID0gY29tcHV0ZWQoZnVuY3Rpb24gKCkgewogICAgICBpZiAobm93UGFnZU51bS52YWx1ZSA9PT0gMSB8fCBwYWdpbkNvdW50cy52YWx1ZSA9PSAwKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9KTsKICAgIHZhciBkaXNhYmxlZE5leHQgPSBjb21wdXRlZChmdW5jdGlvbiAoKSB7CiAgICAgIGlmIChub3dQYWdlTnVtLnZhbHVlID09PSBwYWdpbkNvdW50cy52YWx1ZSB8fCBwYWdpbkNvdW50cy52YWx1ZSA9PT0gMCkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfSk7CgogICAgdmFyIGdldEJhc2ljUGFnaW5nQXJyYXkgPSBmdW5jdGlvbiBnZXRCYXNpY1BhZ2luZ0FycmF5KCkgewogICAgICB2YXIgcGFnaW5nQXJyYXkgPSBbXTsKCiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHBhZ2luQ291bnRzLnZhbHVlOyBpKyspIHsKICAgICAgICBwYWdpbmdBcnJheS5wdXNoKGkpOwogICAgICB9CgogICAgICByZXR1cm4gcGFnaW5nQXJyYXk7CiAgICB9OwoKICAgIHZhciBwYWdpbmdBcnJheSA9IGNvbXB1dGVkKGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHBhZ2luZ0FycmF5ID0gW107CgogICAgICBpZiAocHJvcHMuc2hvd0FsbFBhZ2VOdW1iZXIpIHsKICAgICAgICBwYWdpbmdBcnJheSA9IGdldEJhc2ljUGFnaW5nQXJyYXkoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzd2l0Y2ggKG5vd1BhZ2VOdW1TdGF0dXMudmFsdWUpIHsKICAgICAgICAgIGNhc2UgcGFnZU51bVN0YXR1cy5maXJzdFBhZ2U6CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBwYWdpbmdBcnJheSA9IGdldEJhc2ljUGFnaW5nQXJyYXkoKTsKCiAgICAgICAgICAgICAgaWYgKHBhZ2luQ291bnRzLnZhbHVlID4gcHJvcHMucGFnZU51bWJlcnNMaW1pdGVkKSB7CiAgICAgICAgICAgICAgICBwYWdpbmdBcnJheSA9IHBhZ2luZ0FycmF5LnNsaWNlKDAsIHByb3BzLnBhZ2VOdW1iZXJzTGltaXRlZCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgIGNhc2UgcGFnZU51bVN0YXR1cy5sYXN0UGFnZToKICAgICAgICAgICAgewogICAgICAgICAgICAgIHBhZ2luZ0FycmF5ID0gZ2V0QmFzaWNQYWdpbmdBcnJheSgpOwoKICAgICAgICAgICAgICBpZiAocGFnaW5Db3VudHMudmFsdWUgPiBwcm9wcy5wYWdlTnVtYmVyc0xpbWl0ZWQpIHsKICAgICAgICAgICAgICAgIHBhZ2luZ0FycmF5ID0gcGFnaW5nQXJyYXkuc2xpY2UocGFnaW5Db3VudHMudmFsdWUgLSBwcm9wcy5wYWdlTnVtYmVyc0xpbWl0ZWQsIHBhZ2luQ291bnRzLnZhbHVlKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgY2FzZSBwYWdlTnVtU3RhdHVzLm1pZGRsZVBhZ2U6CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBwYWdpbmdBcnJheSA9IGdldEJhc2ljUGFnaW5nQXJyYXkoKTsKICAgICAgICAgICAgICB2YXIgbWF4SW5kZXggPSBub3dQYWdlTnVtLnZhbHVlOwogICAgICAgICAgICAgIHZhciBtaW5JbmRleCA9IG5vd1BhZ2VOdW0udmFsdWU7CgogICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgcHJvcHMucGFnZU51bWJlcnNMaW1pdGVkOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmIChpICUgMiA9PT0gMCkgewogICAgICAgICAgICAgICAgICB2YXIgdG1wID0gbWluSW5kZXggLSAxOwoKICAgICAgICAgICAgICAgICAgaWYgKHRtcCA+PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgbWluSW5kZXgtLTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXhJbmRleCA8IHBhZ2luQ291bnRzLnZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgbWF4SW5kZXgrKzsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgdmFyIF90bXAgPSBtYXhJbmRleCArIDE7CgogICAgICAgICAgICAgICAgICBpZiAoX3RtcCA8PSBwYWdpbkNvdW50cy52YWx1ZSkgewogICAgICAgICAgICAgICAgICAgIG1heEluZGV4Kys7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWluSW5kZXggPiAxKSB7CiAgICAgICAgICAgICAgICAgICAgbWluSW5kZXgtLTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcGFnaW5nQXJyYXkgPSBwYWdpbmdBcnJheS5zbGljZShtaW5JbmRleCAtIDEsIG1heEluZGV4KTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIHBhZ2luZ0FycmF5OwogICAgfSk7CgogICAgdmFyIGlzUGFnZUl0ZW1OdW1BY3RpdmUgPSBmdW5jdGlvbiBpc1BhZ2VJdGVtTnVtQWN0aXZlKGluZGV4KSB7CiAgICAgIHJldHVybiAiZi1wYWdlLWl0ZW0gcGFnZS1udW0gIi5jb25jYXQoaW5kZXggPT09IG5vd1BhZ2VOdW0udmFsdWUgPyAnYWN0aXZlJyA6ICcnKTsKICAgIH07CgogICAgdmFyIGRvUGFnZUl0ZW1BY3RpdmUgPSBmdW5jdGlvbiBkb1BhZ2VJdGVtQWN0aXZlKHBhZ2VOdW0pIHsKICAgICAgbm93UGFnZU51bS52YWx1ZSA9IHBhZ2VOdW07CiAgICB9OwoKICAgIHZhciBnZXRMYW5nTmFtZSA9IGZ1bmN0aW9uIGdldExhbmdOYW1lKHdvcmQpIHsKICAgICAgdmFyIHJlc3VsdCA9ICcnOwoKICAgICAgc3dpdGNoICh3b3JkKSB7CiAgICAgICAgY2FzZSAnc2hvdyc6CiAgICAgICAgICBpZiAocHJvcHMubGFuZyA9PSAnemgtVFcnKSByZXN1bHQgPSAn6aGv56S6JzsKICAgICAgICAgIGlmIChwcm9wcy5sYW5nID09ICd6aC1DTicpIHJlc3VsdCA9ICfmmL7npLonOwogICAgICAgICAgaWYgKHByb3BzLmxhbmcgPT0gJ2VuJykgcmVzdWx0ID0gJ1Nob3cnOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgJ2VudHJpZXMnOgogICAgICAgICAgaWYgKHByb3BzLmxhbmcgPT0gJ3poLVRXJykgcmVzdWx0ID0gJ+mghSc7CiAgICAgICAgICBpZiAocHJvcHMubGFuZyA9PSAnemgtQ04nKSByZXN1bHQgPSAn6aG5JzsKICAgICAgICAgIGlmIChwcm9wcy5sYW5nID09ICdlbicpIHJlc3VsdCA9ICdlbnRyaWVzJzsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICdzaG93aW5nJzoKICAgICAgICAgIGlmIChwcm9wcy5sYW5nID09ICd6aC1UVycpIHJlc3VsdCA9ICfpoa/npLrnrKwnOwogICAgICAgICAgaWYgKHByb3BzLmxhbmcgPT0gJ3poLUNOJykgcmVzdWx0ID0gJ+aYvuekuuesrCc7CiAgICAgICAgICBpZiAocHJvcHMubGFuZyA9PSAnZW4nKSByZXN1bHQgPSAnU2hvd2luZyc7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAndG8nOgogICAgICAgICAgaWYgKHByb3BzLmxhbmcgPT0gJ3poLVRXJykgcmVzdWx0ID0gJ+iHsyc7CiAgICAgICAgICBpZiAocHJvcHMubGFuZyA9PSAnemgtQ04nKSByZXN1bHQgPSAn6IezJzsKICAgICAgICAgIGlmIChwcm9wcy5sYW5nID09ICdlbicpIHJlc3VsdCA9ICd0byc7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAnb2YnOgogICAgICAgICAgaWYgKHByb3BzLmxhbmcgPT0gJ3poLVRXJykgcmVzdWx0ID0gJ+mghee1kOaenO+8jOWFsSc7CiAgICAgICAgICBpZiAocHJvcHMubGFuZyA9PSAnemgtQ04nKSByZXN1bHQgPSAn6aG557uT5p6c77yM5YWxJzsKICAgICAgICAgIGlmIChwcm9wcy5sYW5nID09ICdlbicpIHJlc3VsdCA9ICdvZic7CiAgICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH07CgogICAgdmFyIGRpcmVjdFBhZ2VOdW0gPSByZWFjdGl2ZShwcm9wcy5kaXJlY3RQYWdlTnVtKTsKICAgIHdhdGNoKGRpcmVjdFBhZ2VOdW0sIGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKHBhZ2luQ291bnRzLnZhbHVlID49IGRpcmVjdFBhZ2VOdW0ucGFnZU51bSkgewogICAgICAgIG5vd1BhZ2VOdW0udmFsdWUgPSBkaXJlY3RQYWdlTnVtLnBhZ2VOdW07CiAgICAgIH0KICAgIH0sIHsKICAgICAgZGVlcDogdHJ1ZQogICAgfSk7CgogICAgaWYgKGF4aW9zQ29uZmlnLnZhbHVlLnVybCAhPT0gJycpIHsKICAgICAgYXhpb3MoYXhpb3NDb25maWcudmFsdWUpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9IHJlc3BvbnNlLmRhdGE7CgogICAgICAgIGlmIChwcm9wcy5zZXJ2ZXJTaWRlKSB7CiAgICAgICAgICBkYXRhU291cmNlLnZhbHVlID0gcmVzcG9uc2VEYXRhLmRhdGEuZGF0YTsKICAgICAgICAgIHRvdGFsTnVtYmVyLnZhbHVlID0gcmVzcG9uc2VEYXRhLmRhdGEucmVjb3Jkc1RvdGFsOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBkYXRhU291cmNlLnZhbHVlID0gcmVzcG9uc2VEYXRhLmRhdGE7CiAgICAgICAgICB0b3RhbE51bWJlci52YWx1ZSA9IHJlc3BvbnNlRGF0YS5kYXRhLmxlbmd0aDsKICAgICAgICB9CgogICAgICAgIGVtaXQoJ2FmdGVyRGF0YVVwZGF0ZScsIHsKICAgICAgICAgIGRhdGFTb3VyY2U6IGRhdGFTb3VyY2UudmFsdWUsCiAgICAgICAgICB0b3RhbE51bWJlcjogdG90YWxOdW1iZXIudmFsdWUsCiAgICAgICAgICBwYWdlU2l6ZTogcGFnZVNpemUudmFsdWUsCiAgICAgICAgICBub3dQYWdlTnVtOiBub3dQYWdlTnVtLnZhbHVlLAogICAgICAgICAgZGF0YVN0YXJ0SW5kZXg6IGRhdGFTdGFydEluZGV4LnZhbHVlLAogICAgICAgICAgZGF0YUVuZEluZGV4OiBkYXRhRW5kSW5kZXgudmFsdWUsCiAgICAgICAgICBmcm9tOiBmcm9tLnZhbHVlLAogICAgICAgICAgdG86IHRvLnZhbHVlLAogICAgICAgICAgcGFnaW5Db3VudHM6IHBhZ2luQ291bnRzLnZhbHVlCiAgICAgICAgfSk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ2Vycm9yOiAlcycsIGVycm9yKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKCFwcm9wcy5pc1BhZ2luRGF0YSkgewogICAgICBlbWl0KCdhZnRlckRhdGFVcGRhdGUnLCB7CiAgICAgICAgZGF0YVNvdXJjZTogZGF0YVNvdXJjZS52YWx1ZS5zbGljZShkYXRhU3RhcnRJbmRleC52YWx1ZSwgZGF0YUVuZEluZGV4LnZhbHVlKSwKICAgICAgICB0b3RhbE51bWJlcjogdG90YWxOdW1iZXIudmFsdWUsCiAgICAgICAgcGFnZVNpemU6IHBhZ2VTaXplLnZhbHVlLAogICAgICAgIG5vd1BhZ2VOdW06IG5vd1BhZ2VOdW0udmFsdWUsCiAgICAgICAgZGF0YVN0YXJ0SW5kZXg6IGRhdGFTdGFydEluZGV4LnZhbHVlLAogICAgICAgIGRhdGFFbmRJbmRleDogZGF0YUVuZEluZGV4LnZhbHVlLAogICAgICAgIGZyb206IGZyb20udmFsdWUsCiAgICAgICAgdG86IHRvLnZhbHVlLAogICAgICAgIHBhZ2luQ291bnRzOiBwYWdpbkNvdW50cy52YWx1ZQogICAgICB9KTsKICAgIH0KCiAgICB2YXIgc3RvcEhhbmRsZSA9IHdhdGNoKFtub3dQYWdlTnVtLCBwYWdlU2l6ZSwgYXhpb3NDb25maWddLCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgcGFnZURhdGEsIHJlc3BvbnNlLCByZXNwb25zZURhdGE7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBwYWdlRGF0YSA9IGRhdGFTb3VyY2UudmFsdWU7CgogICAgICAgICAgICAgIGlmICghcHJvcHMuc2VydmVyU2lkZSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MoYXhpb3NDb25maWcudmFsdWUpOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICByZXNwb25zZURhdGEgPSByZXNwb25zZS5kYXRhOwogICAgICAgICAgICAgIGRhdGFTb3VyY2UudmFsdWUgPSByZXNwb25zZURhdGEuZGF0YS5kYXRhOwogICAgICAgICAgICAgIHRvdGFsTnVtYmVyLnZhbHVlID0gcmVzcG9uc2VEYXRhLmRhdGEucmVjb3Jkc1RvdGFsOwogICAgICAgICAgICAgIHBhZ2VEYXRhID0gZGF0YVNvdXJjZS52YWx1ZTsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMjsKICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDIpOwogICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2Vycm9yOiAlcycsIF9jb250ZXh0LnQwKTsKCiAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE4OwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICBpZiAoIXByb3BzLmlzUGFnaW5EYXRhKSB7CiAgICAgICAgICAgICAgICBwYWdlRGF0YSA9IGRhdGFTb3VyY2UudmFsdWUuc2xpY2UoZGF0YVN0YXJ0SW5kZXgudmFsdWUsIGRhdGFFbmRJbmRleC52YWx1ZSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICBlbWl0KCdhZnRlckRhdGFVcGRhdGUnLCB7CiAgICAgICAgICAgICAgICBkYXRhU291cmNlOiBwYWdlRGF0YSwKICAgICAgICAgICAgICAgIHRvdGFsTnVtYmVyOiB0b3RhbE51bWJlci52YWx1ZSwKICAgICAgICAgICAgICAgIHBhZ2VTaXplOiBwYWdlU2l6ZS52YWx1ZSwKICAgICAgICAgICAgICAgIG5vd1BhZ2VOdW06IG5vd1BhZ2VOdW0udmFsdWUsCiAgICAgICAgICAgICAgICBkYXRhU3RhcnRJbmRleDogZGF0YVN0YXJ0SW5kZXgudmFsdWUsCiAgICAgICAgICAgICAgICBkYXRhRW5kSW5kZXg6IGRhdGFFbmRJbmRleC52YWx1ZSwKICAgICAgICAgICAgICAgIGZyb206IGZyb20udmFsdWUsCiAgICAgICAgICAgICAgICB0bzogdG8udmFsdWUsCiAgICAgICAgICAgICAgICBwYWdpbkNvdW50czogcGFnaW5Db3VudHMudmFsdWUKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMiwgMTJdXSk7CiAgICB9KSkpOwogICAgb25Vbm1vdW50ZWQoZnVuY3Rpb24gKCkgewogICAgICBzdG9wSGFuZGxlKCk7CiAgICB9KTsKICAgIHJldHVybiB7CiAgICAgIHBhZ2VTaXplOiBwYWdlU2l6ZSwKICAgICAgbm93UGFnZU51bTogbm93UGFnZU51bSwKICAgICAgZGF0YVNvdXJjZTogZGF0YVNvdXJjZSwKICAgICAgdG90YWxOdW1iZXI6IHRvdGFsTnVtYmVyLAogICAgICBkYXRhU3RhcnRJbmRleDogZGF0YVN0YXJ0SW5kZXgsCiAgICAgIGRhdGFFbmRJbmRleDogZGF0YUVuZEluZGV4LAogICAgICBmcm9tOiBmcm9tLAogICAgICB0bzogdG8sCiAgICAgIHBhZ2luQ291bnRzOiBwYWdpbkNvdW50cywKICAgICAgZGlzYWJsZWRQcmV2OiBkaXNhYmxlZFByZXYsCiAgICAgIGRpc2FibGVkTmV4dDogZGlzYWJsZWROZXh0LAogICAgICBwYWdpbmdBcnJheTogcGFnaW5nQXJyYXksCiAgICAgIGlzUGFnZUl0ZW1OdW1BY3RpdmU6IGlzUGFnZUl0ZW1OdW1BY3RpdmUsCiAgICAgIGRvUGFnZUl0ZW1BY3RpdmU6IGRvUGFnZUl0ZW1BY3RpdmUsCiAgICAgIGdldExhbmdOYW1lOiBnZXRMYW5nTmFtZQogICAgfTsKICB9Cn07"},null]}